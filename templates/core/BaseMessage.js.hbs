/**
 * @asset({{baseNamespace}}/*)
 */
qx.Class.define('{{baseNamespace}}.core.BaseMessage', {
  extend: qx.core.Object,
  type: 'abstract',

  /*
  *****************************************************************************
     CONSTRUCTOR
  *****************************************************************************
  */
  construct: function (props) {
    this.base(arguments){{lineEnd}}
    if (props) {
      this.set(props){{lineEnd}}
    }
  },
{{#useUTC}}
  /*
  *****************************************************************************
     STATICS
  *****************************************************************************
  */
  statics: {
    /**
     * Convert date from local timezone to an UTC ISO string.
     * @param date {Date?}
     */
    toISOString: function (date) {
      if (date instanceof Date) {
        var tzoffset = date.getTimezoneOffset() * 60000{{lineEnd}} //offset in milliseconds
        return (new Date(date.getTime() - tzoffset)).toISOString(){{lineEnd}}
      } else {
        return ''{{lineEnd}}
      }
    },

    /**
     * Convert from UTC ISO string to date object.
     * @param date {String?}
     */
    fromISOString: function (date) {
      if (qx.lang.Type.isString(date) && date) {
        date = new Date(date){{lineEnd}}
      }
      if (date instanceof Date) {
        var tzoffset = date.getTimezoneOffset() * 60000{{lineEnd}} //offset in milliseconds
        return (new Date(date.getTime() + tzoffset)){{lineEnd}}
      } else {
        return null{{lineEnd}}
      }
    }
  },
{{/useUTC}}
  /*
  *****************************************************************************
     PROPERTIES
  *****************************************************************************
  */
  properties: {
    /**
     * is true if this object has been generated from a protobuf message
     */
    deserialized: {
      check: 'Boolean',
      init: false,
      '@': ['immutable']
    }
  },

  /*
  *****************************************************************************
     MEMBERS
  *****************************************************************************
  */
  members: {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_'name', eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param opt_includeInstance {boolean} Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @returns {!Object}
     */
    toObject: function (opt_includeInstance) {
      var obj = qx.util.Serializer.toNativeObject(this){{lineEnd}}
      if (opt_includeInstance === true) {
        obj.$jspbMessageInstance = this{{lineEnd}}
      }
      return obj{{lineEnd}}
    },

    /**
     * Serializes the message to binary data (in protobuf wire format).
     * @returns {Uint8Array}
     */
    serializeBinary: function () {
      var writer = new jspb.BinaryWriter(){{lineEnd}}
      this.constructor.serializeBinaryToWriter(this, writer){{lineEnd}}
      return writer.getResultBuffer(){{lineEnd}}
    },

    /**
     * Transforms any value to a string
     * @protected
     */
    _toString: function (value) {
      if (qx.lang.Type.isArray(value)) {
        value = value.map(function (entry) {
          return '' + entry{{lineEnd}}
        })
        return value{{lineEnd}}
      }
      return '' + value{{lineEnd}}
    },

    /**
     * Parses JSON strings.
     * @returns {var}
     * @protected
     */
    _fromJson: function (value) {
      if (qx.lang.Type.isString(value)) {
        return qx.lang.Json.parse(value){{lineEnd}}
      }
      return value{{lineEnd}}
    },

    /**
     * Transforms a string to a Date object.
     * @protected
     */
    _toDate: function (value) {
      {{#useUTC}}
      if (qx.lang.Type.isString(value) && value) {
        return {{baseNamespace}}.core.BaseMessage.fromISOString(value){{lineEnd}}
      } else {
        return value{{lineEnd}}
      }
      {{else}}
      if (!value) {
        return null;
      }
      if (qx.lang.Type.isString(value)) {
        return new Date(value){{lineEnd}}
      }
      return value{{lineEnd}}
      {{/useUTC}}
    }{{#timestampSupport}},

    /**
     * Transforms a proto.google.protobuf.Timestamp object to a Date object
     * @param value {proto.google.protobuf.Timestamp}
     * @returns {Date}
     * @protected
     */
    _transformTimestampToDate: function (value) {
      if (value instanceof proto.google.protobuf.Timestamp) {
        return new Date(parseInt(value.getSeconds(), 10) * 1000 + Math.round(parseInt(value.getNanos(), 10)/1000000)){{lineEnd}}
      }
      return value{{lineEnd}}
    }{{/timestampSupport}}
  }{{&defer}}
}){{lineEnd}}
