/**
 * Validator factory where property validation function can be registered to.
 */
qx.Class.define('{{baseNamespace}}.util.ValidatorFactory', {

  /*
  *****************************************************************************
     STATICS
  *****************************************************************************
  */
  statics: {
    __registry: [],
    __regex: /^\s*([\w][^\(]+)\(?([^\)]*)*\)?\s*$/,

    registerValidatorClass: function (validatorClass) {
      if (!this.__registry.includes(validatorClass)) {
        this.__registry.push(validatorClass){{lineEnd}}
      }
    },

    /**
     *
     * @param {String} methodCall method call as string e.g. range(0,10)
     * @returns {Function}
     */
    getValidator: function (methodCall) {
      const call = this.__parseMethodCall(methodCall){{lineEnd}}
      if (qx.core.Environment.get('qx.debug')) {
        qx.core.Assert.assertNotNull(call){{lineEnd}}
      }
      for (var i = 0, l = this.__registry.length; i < l; i++) {
        const validatorClass = this.__registry[i]{{lineEnd}}
        if (validatorClass.hasOwnProperty(call.name)) {
          return validatorClass[call.name].apply(validatorClass, call.params){{lineEnd}}
        }
      }
      // check if there is a qx validator for that
      if (qx.util.Validate.hasOwnProperty(call.name)) {
        return qx.util.Validate[call.name].apply(qx.util.Validate, call.params){{lineEnd}}
      }

      return null{{lineEnd}}
    },

    __parseMethodCall: function (methodCall) {
      const match = this.__regex.exec(methodCall.replace(/Â´/g, '"')){{lineEnd}}
      if (match) {
        const params = []
        if (match[2]) {
          const paramString = match[2]{{lineEnd}}
          let mode = 'normal'{{lineEnd}}
          let param = ''{{lineEnd}}
          for (let i = 0, l = paramString.length; i < l; i++) {
            const c = paramString[i]{{lineEnd}}
            if (c === '[' && (i === 0 || paramString[i-1] !== '\\')) {
              mode = 'json'{{lineEnd}}
              param = c{{lineEnd}}
            } else if (c === ']' && (i === 0 || paramString[i-1] !== '\\')) {
              mode = 'normal'{{lineEnd}}
              param += c{{lineEnd}}
              params.push(qx.lang.Json.parse(param.trim())){{lineEnd}}
              param = ''{{lineEnd}}
            } else {
              if (mode === 'normal' && c === ',') {
                if (param) {
                  params.push(qx.lang.Json.parse(param.trim())){{lineEnd}}
                  param = ''
                }
              } else {
                param += c{{lineEnd}}
              }
            }
          }
          if (param) {
            params.push(qx.lang.Json.parse(param.trim())){{lineEnd}}
          }
        }
        return {
          name: match[1],
          params: params
        }
      }
      return null{{lineEnd}}
    }
  },

  defer: function (statics) {
  {{#each validatorClasses}}
    statics.registerValidatorClass({{&.}}){{../lineEnd}}
  {{/each}} 
  }
}){{lineEnd}}
