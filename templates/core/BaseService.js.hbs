/**
 * @ignore(grpc)
 */
qx.Class.define('{{baseNamespace}}.core.BaseService', {
  extend: qx.core.Object,
  type: 'abstract',

  /*
  *****************************************************************************
     CONSTRUCTOR
  *****************************************************************************
  */
  construct: function (url, metadata) {
    this.base(arguments){{lineEnd}}
    this.setUrl(url){{lineEnd}}

    if (metadata) {
      this.setMetadata(metadata){{lineEnd}}
    }

    this.__postRpcHooks = {}{{lineEnd}}
  },

  /*
  *****************************************************************************
     STATICS
  *****************************************************************************
  */
  statics: {
    __grpcErrorHandlers: {},

    /**
     * Register an error handler for a specified GRPC error code.
     * The handler will be called when an GRPC-RPC response returned that code 
     * like this handler(errorCode, errorMessage)
     * @param errorCode {Number} grpc error code
     * @param handler {Function} callback that should be executed in error case 
     * @param context {Object} context of the callback
     */
    registerGrpcErrorHandler: function (errorCode, handler, context) {
      this.__grpcErrorHandlers[errorCode] = {
        callback: handler,
        context: context || this
      }{{lineEnd}}
    },

    /**
     * Unregister an error handler for a specified GRPC error code.
     * @param errorCode {Number} grpc error code
     */
    unregisterGrpcErrorHandler: function (errorCode) {
      delete this.__grpcErrorHandlers[errorCode]{{lineEnd}}
    },

    /**
     * Get an error handler for a specified GRPC error code.
     * @param errorCode {Number} grpc error code
     * @return {Map|null}
     */
    getErrorHandler: function (errorCode) {
      return this.__grpcErrorHandlers[errorCode]{{lineEnd}}
    }
  },

  /*
  *****************************************************************************
     PROPERTIES
  *****************************************************************************
  */
  properties: {
    url: {
      check: 'String',
      init: 'null'
    },

    metadata: {
      check: 'Object',
      nullable: true,
      apply: '_applyMetadata'
    }
  },

  /*
  *****************************************************************************
     MEMBERS
  *****************************************************************************
  */
  members: {
    __metadata: null,
    __postRpcHooks: null,

    addPostRpcHook: function (rpcMethod, callback, context) {
      this.__postRpcHooks[rpcMethod] = [callback, context]{{lineEnd}}
    },

    removePostRpcHook: function (rpcMethod) {
      delete this.__postRpcHooks[rpcMethod]{{lineEnd}}
    },

    _applyMetadata: function (value) {
      if (value) {
        this.__metadata = new grpc.Metadata(value){{lineEnd}}
      } else {
        this.__metadata = null{{lineEnd}}
      }
    },

    _call: function (payload, serviceDefinition) {
      var args = qx.lang.Array.fromArguments(arguments, 2){{lineEnd}}
      var config = {
        request: payload,
        host: this.getUrl(),
        metadata: this.__metadata
        // debug: qx.core.Environment.get('qx.debug')
      }{{lineEnd}}
      var context = this{{lineEnd}}
      var self = this{{lineEnd}}
      if (typeof args[args.length - 1] === 'object') {
        context = args.pop(){{lineEnd}}
      }
      return new qx.Promise(function (resolve, reject) {
        if (serviceDefinition.responseStream === true) {
          // streaming response
          
          var callback{{lineEnd}}
          if (typeof args[args.length - 1] === 'function') {
            callback = args.pop(){{lineEnd}}
          } else {
            throw Error('no callback defined'){{lineEnd}}
          }
          if (config.request === callback) {
            throw Error('no payload defined'){{lineEnd}}
          }
          var onMessageCallback = callback.bind(context){{lineEnd}}
          if (self.__postRpcHooks.hasOwnProperty(serviceDefinition.methodName)) {
            onMessageCallback = function (message) {
              var entry = self.__postRpcHooks[serviceDefinition.methodName]{{lineEnd}}
              message = entry[0].call(entry[1], message){{lineEnd}}
              callback.call(context, message){{lineEnd}}
            }
          }
          grpc.invoke(serviceDefinition, Object.assign(config, {
            onMessage: onMessageCallback,
            onEnd: function (code, message, trailers) {
              if (code !== grpc.Code.OK) {
                var errorHandler = {{baseNamespace}}.core.BaseService.getErrorHandler(code){{lineEnd}}
                if (errorHandler) {
                  errorHandler.callback.call(errorHandler.context, code, message){{lineEnd}}
                  reject(){{lineEnd}}
                } else {
                  reject(new Error(message)){{lineEnd}}
                }
              }
              else {
                resolve(message){{lineEnd}}
              }
            },
            debug: {{debugInvoke}}
          })){{lineEnd}}
        }
        else {
          grpc.unary(serviceDefinition, Object.assign(config, {
            onEnd: function (res) {
              if (res.status !== grpc.Code.OK) {
                var errorHandler = {{baseNamespace}}.core.BaseService.getErrorHandler(res.status){{lineEnd}}
                if (errorHandler) {
                  errorHandler.callback.call(errorHandler.context, res.status, res.statusMessage){{lineEnd}}
                  reject(){{lineEnd}}
                } else {
                  reject(new Error('RPC ' + serviceDefinition.methodName + ' returned an error: ' + res.statusMessage)){{lineEnd}}
                }
              }
              else {
                if (self.__postRpcHooks.hasOwnProperty(serviceDefinition.methodName)) {
                  var entry = self.__postRpcHooks[serviceDefinition.methodName]{{lineEnd}}
                  res.message = entry[0].call(entry[1], res.message){{lineEnd}}
                }
                resolve(res.message){{lineEnd}}
              }
            },
            debug: {{debugUnary}}
          })){{lineEnd}}
        }
      }, context){{lineEnd}}
    }
  }
}){{lineEnd}}